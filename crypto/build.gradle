dependencies {
    implementation project(":common")

    implementation 'com.github.multiformats:java-multibase:1.1.0'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'net.openhft:zero-allocation-hashing:0.16'
}

test {
    systemProperty "java.library.path", file("${buildDir}/jni-crypto/release").absolutePath
}

task compileRust {
    project.logger.info("#####################" + System.getProperty("os.name").toLowerCase())
    doLast {
        // nix build detection
        if (!System.getenv('NIX_CC').empty) {
            exec {
                workingDir 'src/jni-crypto'
                commandLine 'cargo', 'build', '--release', '--target=aarch64-unknown-linux-gnu', '--target-dir=../../build/jni-crypto'
            }
            exec {
                workingDir 'src/jni-crypto'
                commandLine 'cargo', 'build', '--release', '--target=x86_64-unknown-linux-gnu', '--target-dir=../../build/jni-crypto'
            }
            exec {
                workingDir 'src/jni-crypto'
                commandLine 'cargo', 'build', '--release', '--target=x86_64-pc-windows-gnu', '--target-dir=../../build/jni-crypto'
                environment RUSTFLAGS: "-L ${System.getenv('PTHREAD_LOCATION')}"
            }
        } else {
            // Does not cover solaris, just MacOS. See potential return types here:
            // https://docs.gradle.org/current/javadoc/org/gradle/nativeplatform/platform/OperatingSystem.html  
            exec {
                workingDir 'src/jni-crypto'
                commandLine 'cargo', 'build', '--release', '--target-dir=../../build/jni-crypto'
            }
        }
    }
}

compileJava.dependsOn(compileRust)

processResources {
    from("${buildDir}/jni-crypto/release") {
        into "include/macos"
        include '*.dylib'
    }
    from("${buildDir}/jni-crypto/x86_64-unknown-linux-gnu/release") {
        into "include/x86_64-linux"
        include '*.so'
    }
    from("${buildDir}/jni-crypto/aarch64-unknown-linux-gnu/release") {
        into "include/aarch64-linux"
        include '*.so'
    }
    from("${buildDir}/jni-crypto/x86_64-pc-windows-gnu/release") {
        into "include/windows"
        include '*.dll'
    }
}
